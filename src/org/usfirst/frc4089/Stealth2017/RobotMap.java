// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4089.Stealth2017;

import com.ctre.CANTalon;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

import com.ctre.CANTalon;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveRightMotor1;
    public static SpeedController driveRightMotor2;
    public static SpeedController driveLeftMotor1;
    public static SpeedController driveLeftMotor2;
    public static RobotDrive driveRobotDrive41;
    public static SpeedController collectorMotorBC;
    public static SpeedController shooterShooterMotor;
    public static Encoder shooterQuadratureEncoder1;
    public static SpeedController ellevatorEllevatorMotor;
    public static SpeedController climberMotor1;
    public static SpeedController climberMotor2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveRightMotor1 = new CANTalon(Constants.rightMotor1SpeedControl);
        LiveWindow.addActuator("Drive", "RightMotor1", (CANTalon) driveRightMotor1);
        
        driveRightMotor2 = new CANTalon(Constants.rightMotor2SpeedControl);
        LiveWindow.addActuator("Drive", "RightMotor2", (CANTalon) driveRightMotor2);
        
        driveLeftMotor1 = new CANTalon(Constants.left1MotorSpeedControl);
        LiveWindow.addActuator("Drive", "LeftMotor1", (CANTalon) driveLeftMotor1);
        
        driveLeftMotor2 = new CANTalon(Constants.left2MotorSpeedControl);
        LiveWindow.addActuator("Drive", "LeftMotor2", (CANTalon) driveLeftMotor2);
        
        driveRobotDrive41 = new RobotDrive(driveLeftMotor1, driveLeftMotor2,
              driveRightMotor1, driveRightMotor2);
        
        driveRobotDrive41.setSafetyEnabled(true);
        driveRobotDrive41.setExpiration(0.1);
        driveRobotDrive41.setSensitivity(0.5);
        driveRobotDrive41.setMaxOutput(1.0);

        collectorMotorBC = new CANTalon(Constants.collectorMotorControl);
        LiveWindow.addActuator("Collector", "MotorBC", (CANTalon) collectorMotorBC);
        
        shooterShooterMotor = new CANTalon(Constants.ShooterMotorSpeedControl);
        LiveWindow.addActuator("Shooter", "ShooterMotor", (CANTalon) shooterShooterMotor);
        
        shooterQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Quadrature Encoder 1", shooterQuadratureEncoder1);
        shooterQuadratureEncoder1.setDistancePerPulse(1.0);
        shooterQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        ellevatorEllevatorMotor = new CANTalon(2);
        LiveWindow.addActuator("Ellevator", "EllevatorMotor", (CANTalon) ellevatorEllevatorMotor);
        
        climberMotor1 = new CANTalon(Constants.climbMotor1SpeedControl);
        LiveWindow.addActuator("Climber", "ClimberMotor1", (CANTalon) climberMotor1);
        
        climberMotor2 = new CANTalon(Constants.climbMotor2SpeedControl);
        LiveWindow.addActuator("Climber", "ClimberMotor2", (CANTalon) climberMotor2);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
    /*backup of the above code because i beleive robot builder will woverwrite my changes.
     * driveRightMotor1 = new CANTalon(Constants.rightMotor1SpeedControl);
        LiveWindow.addActuator("Drive", "RightMotor1", (CANTalon) driveRightMotor1);
        
        driveRightMotor2 = new CANTalon(Constants.rightMotor2SpeedControl);
        LiveWindow.addActuator("Drive", "RightMotor2", (CANTalon) driveRightMotor2);
        
        driveLeftMotor1 = new CANTalon(Constants.left1MotorSpeedControl);
        LiveWindow.addActuator("Drive", "LeftMotor1", (CANTalon) driveLeftMotor1);
        
        driveLeftMotor2 = new CANTalon(Constants.left2MotorSpeedControl);
        LiveWindow.addActuator("Drive", "LeftMotor2", (CANTalon) driveLeftMotor2);
        
        driveRobotDrive41 = new RobotDrive(driveLeftMotor1, driveLeftMotor2,
              driveRightMotor1, driveRightMotor2);
        
        driveRobotDrive41.setSafetyEnabled(true);
        driveRobotDrive41.setExpiration(0.1);
        driveRobotDrive41.setSensitivity(0.5);
        driveRobotDrive41.setMaxOutput(1.0);

        collectorMotorBC = new CANTalon(Constants.collectorMotorControl);
        LiveWindow.addActuator("Collector", "MotorBC", (CANTalon) collectorMotorBC);
        
        shooterShooterMotor = new CANTalon(Constants.ShooterMotorSpeedControl);
        LiveWindow.addActuator("Shooter", "ShooterMotor", (CANTalon) shooterShooterMotor);
        
        shooterQuadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("Shooter", "Quadrature Encoder 1", shooterQuadratureEncoder1);
        shooterQuadratureEncoder1.setDistancePerPulse(1.0);
        shooterQuadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        ellevatorEllevatorMotor = new CANTalon(2);
        LiveWindow.addActuator("Ellevator", "EllevatorMotor", (CANTalon) ellevatorEllevatorMotor);
        
        climberMotor1 = new CANTalon(Constants.climbMotor1SpeedControl);
        LiveWindow.addActuator("Climber", "ClimberMotor1", (CANTalon) climberMotor1);
        
        climberMotor2 = new CANTalon(Constants.climbMotor2SpeedControl);
        LiveWindow.addActuator("Climber", "ClimberMotor2", (CANTalon) climberMotor2);
        
     */
    }
}
